name: Continuous Deployment

on:
  pull_request:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform Run"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Init
        id: init
        run: cd terraform && terraform init
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd terraform && terraform plan -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: cd terraform && terraform apply -auto-approve -input=false
  ansible:
    name: "Ansible Run"
    runs-on: ubuntu-latest
    needs: terraform
    container:
      image: docker.io/cytopia/ansible:latest-tools
      env:
        COLLECTIONS_PATH: ansible/.collections
        ANSIBLE_CONFIG: ansible/ansible.cfg
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pip dependencies
        run: pip3 install -r ansible/requirements.txt
      - name: Install ansible-galaxy dependencies
        run: ansible-galaxy install -r ansible/requirements.yml
      - name: Start SSH Agent
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo "${{secrets.SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
      - name: Ansible Run
        id: run
        if: github.ref == 'refs/heads/main'
        run: ansible-playbook ansible/minecraft.yml -e ansible_user=ci -e ansible_ssh_port=59245 -v
        env:
          HCLOUD_TOKEN: ${{secrets.HCLOUD_TOKEN}}
